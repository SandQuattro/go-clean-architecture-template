services:
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: demo
      #PGPORT: 5433 # if we want to change pg default port
    volumes:
      - ./pg_volume/volumes/postgres:/var/lib/postgresql/data # link container folder to host machine folder
    expose:
      - "5433" # Publishes 5433 to other containers but NOT to host machine
    ports:
      - "5433:5432"
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $${POSTGRES_DB}
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  jaeger:
    image: jaegertracing/all-in-one:1.61.0
    container_name: jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686" # http://localhost:16686 Jaeger UI
      - "14268:14268"
      - "4317:4317"
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus_volume:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: unless-stopped
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ./grafana_volume/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./grafana_volume:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 9000:8000
    container_name: app
    environment:
      DEBUG: ${DEBUG}
      DB_PASSWORD: ${DB_PASSWORD}
      ENV_NAME: ${ENV_NAME}
      GOMEMLIMIT: "7MiB" # устанавливает общий объем памяти, которым может пользоваться Go runtime (90-95% от limit)
      GOGC: 100 # процент новой необработанной памяти кучи от живой памяти, по достижении которого будет запущена сборка мусора
    deploy:
      resources:
        limits:
          memory: 8M # абсолютное ограничение по использованию памяти в контейнере
    depends_on:
      postgres:
        condition: service_healthy
      jaeger:
        condition: service_started
  integration-tests:
    build:
      context: .
      dockerfile: integration-test/Dockerfile
    depends_on:
      app:
        condition: service_started
    container_name: tests
    environment:
      - HOST=app
      - PORT=8000